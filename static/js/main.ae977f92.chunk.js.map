{"version":3,"sources":["api/fetchNews.ts","components/header/searchbar/searchbar.component.tsx","api/fetchSources.ts","api/fetchCategories.ts","components/header/dialog/filterrow.component.tsx","components/header/dialog/dialog.component.tsx","components/header/header.component.tsx","utils/covertodate.ts","components/sidebar/newslistItem/newslistitem.component.tsx","components/sidebar/datepicker/datepicker.component.tsx","components/sidebar/sidebar.component.tsx","components/main/main.component.tsx","index.tsx"],"names":["ParentClassification","Sentiment","searchValueFromLocalStorage","localStorage","getItem","SearchBar","searchValue","useState","value","setvalue","useEffect","setItem","TextField","label","onChange","e","target","onKeyDown","keyCode","size","placeholder","variant","InputProps","startAdornment","fetchSources","a","fetch","json","data","sources","fetchCatogories","console","log","sentiments","sentiment","FilterRow","callback","default","options","setoptions","Box","noValidate","component","sx","display","flexDirection","justifyContent","paddingBottom","FormControl","style","minWidth","InputLabel","id","Select","toString","then","res","MenuItem","Autocomplete","event","categories","multiple","getOptionLabel","option","category","renderInput","params","name","BootstrapDialogTitle","props","children","onClose","other","DialogTitle","m","p","IconButton","onClick","position","right","top","color","theme","palette","grey","getQueriesFromLocalstorage","JSON","parse","FormDialog","numberFilters","setNumberFilters","React","open","setOpen","query","setQuery","categoryQuery","setcategoryQuery","sourceQuery","setsourceQuery","setObjsToRender","sentimentQuery","setSentimentQuery","domain","stringify","getNumberOffilters","handleClose","getQueryValues","arrayValues","objs","count","length","values","Button","textTransform","marginLeft","height","className","Dialog","maxWidth","fullWidth","DialogContent","dividers","old","marginBottom","disabled","Array","map","i","DialogActions","Header","advancedSearchQuery","convertDates","obj","item","date","moment","format","fetchNews","start_date","subtract","end_date","source_id","category_id","apikey","endpoint","newsDatas","result","NewsListItem","title","publication","setcolor","Positive","Neutral","Negative","ListItem","button","ListItemText","margin","Divider","RangePicker","DatePicker","BasicDateRangePicker","filternews","setValue","LocalizationProvider","dateAdapter","AdapterDateFns","width","ranges","Today","startOf","endOf","dates","toDate","SideBar","news","selectedArticle","List","maxHeight","overflow","MainReader","content","App","setnews","filtered","setfiltered","newsToDisplay","setNewsToDisplay","setSearchValue","DateAdapter","categoryQ","sourceQ","sentimentQ","iptc_code","join","find","filteredNews","filter","newstime","start","end","isBetween","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae977f92.chunk.js","sourcesContent":["import moment from \"moment\";\r\nimport { convertDates } from \"./../utils/covertodate\";\r\nexport const fetchNews = async ({\r\n  query = \"iphone\",\r\n  sentiment = \"\",\r\n  start_date = moment().subtract(65, \"days\").format(\"YYYY-MM-DD\"),\r\n  end_date = moment().format(\"YYYY-MM-DD\"),\r\n  source_id = \"277%2C4171\",\r\n  category_id = \"13010000%2C04018000\",\r\n} = {}) => {\r\n  const apikey = \"IHEwbeb7kN3f7I3Qizc1FqAJVexvcKUE\";\r\n  const endpoint = `https://get.scrapehero.com/news-api/news/?q=${query}${\r\n    sentiment !== \"\" ? \"&sentiment\" : \"\"\r\n  }${sentiment}&start_date=${start_date}&end_date=${end_date}&source_id=${source_id}&category_id=${category_id}&x-api-key=${apikey}`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  let newsDatas = data.result.data;\r\n  // const newsCount = data.result.count;\r\n  // let dataUrl: string = data.result.nextUrl;\r\n  /*\r\n  while (newsDatas.length > newsCount) {\r\n    let data: any;\r\n    fetchMore(dataUrl).then((res) => {\r\n      data = res;\r\n      console.log(data);\r\n\r\n      dataUrl = data.nextUrl;\r\n      console.log(dataUrl);\r\n\r\n      newsDatas = [...newsDatas, data.data];\r\n    });\r\n  }\r\n*/\r\n  return convertDates(newsDatas);\r\n};\r\n//const fetchMore = async (url: string) => {\r\n// const modifiedurl = \"https\" + url.slice(4);\r\n\r\n// const data = await (\r\n//   await fetch(modifiedurl + `&x-api-key=IHEwbeb7kN3f7I3Qizc1FqAJVexvcKUE`)\r\n//  ).json();\r\n\r\n// return data.result;\r\n//};\r\nexport interface Newsdata {\r\n  data: Datum[];\r\n  count: number;\r\n  nextUrl: string;\r\n}\r\n\r\nexport interface Datum {\r\n  date: string;\r\n  sentiment: Sentiment;\r\n  title: string;\r\n  content: string;\r\n  url: string;\r\n  id: string;\r\n  parent_classification: ParentClassification;\r\n  child_classification?: string;\r\n  publication: string;\r\n  callback?: any;\r\n}\r\n\r\nexport enum ParentClassification {\r\n  Health = \"health\",\r\n  ScienceAndTechnology = \"science and technology\",\r\n}\r\n\r\nexport enum Sentiment {\r\n  Neutral = \"Neutral\",\r\n  Positive = \"Positive\",\r\n  Negative = \"Negative\",\r\n}\r\nexport interface Sentiments {\r\n  sentiment: Sentiment;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\ninterface props {\r\n  searchValue?: any;\r\n}\r\nconst searchValueFromLocalStorage = localStorage.getItem(\"searchValue\") || \"\";\r\n\r\nexport const SearchBar: React.FC<props> = ({ searchValue }) => {\r\n  const [value, setvalue] = useState(searchValueFromLocalStorage);\r\n\r\n  useEffect(() => {\r\n    searchValue(value);\r\n    localStorage.setItem(\"searchValue\", value);\r\n    // eslint-disable-next-line\r\n  }, [value]);\r\n  const submitForSearch = (e: React.KeyboardEvent) => {\r\n    if (e.keyCode === 13) {\r\n      searchValue(value);\r\n    }\r\n  };\r\n  return (\r\n    <TextField\r\n      label=\"search\"\r\n      value={value}\r\n      onChange={(e) => setvalue(e.target.value)}\r\n      onKeyDown={submitForSearch}\r\n      size=\"small\"\r\n      placeholder=\"Search here..\"\r\n      variant=\"outlined\"\r\n      InputProps={{\r\n        startAdornment: <SearchIcon />,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","export const fetchSources = async () => {\r\n  const endpoint =\r\n    \"https://get.scrapehero.com/news-api/sources/?x-api-key=IHEwbeb7kN3f7I3Qizc1FqAJVexvcKUE\";\r\n  const data: Sources = await (await fetch(endpoint)).json();\r\n  return data.sources;\r\n};\r\n\r\nexport interface Sources {\r\n  sources: Source[];\r\n}\r\n\r\nexport interface Source {\r\n  id: number;\r\n  name: string;\r\n  domain: string;\r\n}\r\n","export const fetchCatogories = async () => {\r\n  const endpoint =\r\n    \"https://get.scrapehero.com/news-api/categories/?x-api-key=IHEwbeb7kN3f7I3Qizc1FqAJVexvcKUE\";\r\n  const data = await (await fetch(endpoint)).json();\r\n  console.log(data);\r\n\r\n  return data;\r\n};\r\n\r\nexport interface Categories {\r\n  category: string;\r\n  iptc_code: string;\r\n  sub_categories: SubCategory[];\r\n}\r\n\r\nexport interface SubCategory {\r\n  iptc_code: string;\r\n  category: string;\r\n}\r\n","import {\r\n  Autocomplete,\r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { Categories } from \"../../../api/fetchCategories\";\r\n\r\nimport { fetchSources, Source } from \"../../../api/fetchSources\";\r\nimport { fetchCatogories } from \"./../../../api/fetchCategories\";\r\ninterface Sentiments {\r\n  sentiment: string;\r\n}\r\ninterface Default {\r\n  default: string;\r\n}\r\nconst sentiments = [\r\n  {\r\n    sentiment: \"Positive\",\r\n  },\r\n  {\r\n    sentiment: \"Negative\",\r\n  },\r\n  {\r\n    sentiment: \"Neutral\",\r\n  },\r\n];\r\n//type optiontypes = Categories[] | Source[] | Sentiments[] | Default;\r\ninterface props {\r\n  callback?: any;\r\n}\r\nexport const FilterRow: React.FC<props> = ({ callback }) => {\r\n  const [options, setoptions] = useState<any>([{ default: \"\" }]);\r\n  //const [selectedValues, setSelectedValues] = useState<any>([]);\r\n  const handleOptions = (e: SelectChangeEvent) => {\r\n    console.log(e.target.value);\r\n    setoptions([{ default: \"\" }]);\r\n\r\n    switch (e.target.value.toString()) {\r\n      case \"20\":\r\n        fetchSources().then((res) => setoptions(res));\r\n        break;\r\n      case \"10\":\r\n        fetchCatogories().then((res) => setoptions(res));\r\n        break;\r\n      case \"30\":\r\n        setoptions(sentiments);\r\n    }\r\n  };\r\n  return (\r\n    <Box\r\n      noValidate\r\n      component=\"form\"\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        paddingBottom: \"20px\",\r\n      }}\r\n    >\r\n      <FormControl style={{ minWidth: 120 }}>\r\n        <InputLabel id=\"demo-simple-select-label\">Filter</InputLabel>\r\n        <Select label=\"filter\" id=\"demo-simple-select\" onChange={handleOptions}>\r\n          <MenuItem value={10}>Category</MenuItem>\r\n          <MenuItem value={20}>Source</MenuItem>\r\n          <MenuItem value={30}>Sentiment</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      {(() => {\r\n        if (\"category\" in options[0]) {\r\n          return (\r\n            <Autocomplete\r\n              onChange={(event, value) => callback({ categories: value })}\r\n              style={{ minWidth: 600 }}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={options}\r\n              getOptionLabel={(option: Categories) => option.category}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"standard\" />\r\n              )}\r\n            />\r\n          );\r\n        } else if (\"name\" in options[0]) {\r\n          return (\r\n            <Autocomplete\r\n              onChange={(event, value) => callback({ sources: value })}\r\n              style={{ minWidth: 600 }}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={options}\r\n              getOptionLabel={(option: Source) => option.name}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"standard\" />\r\n              )}\r\n            />\r\n          );\r\n        } else if (\"sentiment\" in options[0]) {\r\n          return (\r\n            <Autocomplete\r\n              onChange={(event, value) => callback({ sentiments: value })}\r\n              style={{ minWidth: 600 }}\r\n              id=\"tags-standard\"\r\n              options={options}\r\n              getOptionLabel={(option: Sentiments) => option.sentiment}\r\n              renderInput={(params) => (\r\n                <TextField {...params} variant=\"standard\" />\r\n              )}\r\n            />\r\n          );\r\n        }\r\n        return (\r\n          <Autocomplete\r\n            style={{ minWidth: 600 }}\r\n            multiple\r\n            id=\"tags-standard\"\r\n            options={options}\r\n            getOptionLabel={(option: Default) => option.default}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"standard\" />\r\n            )}\r\n          />\r\n        );\r\n      })()}\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport { Source } from \"./../../../api/fetchSources\";\r\nimport { FilterRow } from \"./filterrow.component\";\r\nexport interface DialogTitleProps {\r\n  id: string;\r\n  children?: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\ninterface DialogProps {\r\n  callback?: any;\r\n}\r\n\r\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\nconst getQueriesFromLocalstorage = JSON.parse(\r\n  localStorage.getItem(\"query\") || \"[]\"\r\n);\r\n\r\nexport const FormDialog: React.FC<DialogProps> = ({ callback }) => {\r\n  const [numberFilters, setNumberFilters] = useState(1);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [query, setQuery] = useState<any>(getQueriesFromLocalstorage);\r\n  const [categoryQuery, setcategoryQuery] = useState<any>({ categories: [] });\r\n  const [sourceQuery, setsourceQuery] = useState<any>({ sources: [] });\r\n  const [objsToRender, setObjsToRender] = useState<any>([]);\r\n  const [sentimentQuery, setSentimentQuery] = useState<any>({ sentiments: [] });\r\n  const [options, setoptions] = useState<Source[]>([\r\n    { id: 1, name: \"\", domain: \"us.cnn.com\" },\r\n  ]);\r\n  useEffect(() => {\r\n    setQuery({ categoryQuery, sourceQuery, sentimentQuery });\r\n  }, [categoryQuery, sentimentQuery, sourceQuery]);\r\n  useEffect(() => {\r\n    localStorage.setItem(\"query\", JSON.stringify(query));\r\n  }, [query]);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  useEffect(() => {\r\n    getNumberOffilters();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  console.log(open);\r\n  /* const handleOptions = (e: SelectChangeEvent) => {\r\n    console.log(e.target.value);\r\n    switch (e.target.value.toString()) {\r\n      case \"20\":\r\n        fetchSources().then((res) => setoptions(res));\r\n        break;\r\n      case \"10\":\r\n        break;\r\n    }\r\n  }; */\r\n  const getQueryValues = (arrayValues: any) => {\r\n    if (\"categories\" in arrayValues) {\r\n      setcategoryQuery(arrayValues);\r\n    } else if (\"sources\" in arrayValues) {\r\n      setsourceQuery(arrayValues);\r\n    } else if (\"sentiments\" in arrayValues) {\r\n      setSentimentQuery(arrayValues);\r\n    }\r\n  };\r\n  const getNumberOffilters = () => {\r\n    let objs: any = [];\r\n    let count = 1;\r\n    if (\r\n      typeof query.categoryQuery.categories !== \"undefined\" &&\r\n      query.categoryQuery.categories.length > 0\r\n    ) {\r\n      count++;\r\n      objs = [\r\n        ...objs,\r\n        { option: \"10\", values: query.categoryQuery.categories },\r\n      ];\r\n    }\r\n    if (\r\n      typeof query.sourceQuery.sources !== \"undefined\" &&\r\n      query.sourceQuery.sources.length > 0\r\n    ) {\r\n      count++;\r\n      objs = [...objs, { option: \"10\", values: query.sourceQuery.sources }];\r\n    }\r\n    if (typeof query.sentimentQuery.sentiments.sentiment !== \"undefined\") {\r\n      count++;\r\n      objs = [\r\n        ...objs,\r\n        { option: \"20\", values: query.sentimentQuery.sentiments },\r\n      ];\r\n    }\r\n    if (count === 4) {\r\n      count = 3;\r\n    }\r\n    setNumberFilters(count);\r\n    setObjsToRender(objs);\r\n  };\r\n  const onsubmit = () => {\r\n    if (query.length !== 0) {\r\n      callback(query);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        style={{ textTransform: \"none\", marginLeft: \".5em\", height: \"40px\" }}\r\n        variant=\"outlined\"\r\n        className=\"searchbutton\"\r\n        onClick={handleClickOpen}\r\n        color=\"primary\"\r\n      >\r\n        Advance Search\r\n      </Button>\r\n\r\n      <Dialog\r\n        maxWidth=\"md\"\r\n        fullWidth={true}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <BootstrapDialogTitle\r\n          id=\"customized-dialog-title\"\r\n          onClose={handleClose}\r\n        >\r\n          Advanced Search\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <DialogContent>\r\n            <Button\r\n              onClick={() => setNumberFilters((old) => old + 1)}\r\n              variant=\"outlined\"\r\n              sx={{ marginBottom: \"20px\" }}\r\n              disabled={numberFilters > 2}\r\n            >\r\n              Add Filter\r\n            </Button>\r\n            {[...Array(numberFilters)].map((e, i) => (\r\n              <FilterRow key={i} callback={getQueryValues} />\r\n            ))}\r\n          </DialogContent>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={onsubmit} variant=\"outlined\" color=\"primary\">\r\n            Show Results\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n","import \"./header.styles.css\";\r\nimport { SearchBar } from \"./searchbar/searchbar.component\";\r\nimport { FormDialog } from \"./dialog/dialog.component\";\r\ninterface props {\r\n  searchValue?: any;\r\n  advancedSearchQuery?: any;\r\n}\r\n\r\nexport const Header: React.FC<props> = ({\r\n  searchValue,\r\n  advancedSearchQuery,\r\n}) => {\r\n  const callback = (value: string) => {\r\n    searchValue(value);\r\n  };\r\n  const advancedSearch = (value: any) => {\r\n    advancedSearchQuery(value);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"navcontainer\">\r\n        <div className=\"logo\">\r\n          News<span>Reader</span>\r\n        </div>\r\n        <SearchBar searchValue={callback} />\r\n\r\n        <FormDialog callback={advancedSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import moment from \"moment\";\r\nimport { Datum } from \"../api/fetchNews\";\r\n\r\nexport const convertDates = (obj: Datum[]) => {\r\n  const updatedobj = obj.map((item) => ({\r\n    ...item,\r\n    date: moment(item.date).format(\"LL\"),\r\n  }));\r\n  return updatedobj;\r\n};\r\n","import { Datum, Sentiment } from \"../../../api/fetchNews\";\r\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\r\nimport { Divider, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nexport const NewsListItem: React.FC<Datum> = ({\r\n  title,\r\n  sentiment,\r\n  publication,\r\n  date,\r\n  callback,\r\n  id,\r\n}) => {\r\n  const [color, setcolor] = useState(\"\");\r\n  useEffect(() => {\r\n    switch (sentiment) {\r\n      case Sentiment.Positive:\r\n        setcolor(\"green\");\r\n        break;\r\n      case Sentiment.Neutral:\r\n        setcolor(\"gray\");\r\n        break;\r\n\r\n      case Sentiment.Negative:\r\n        setcolor(\"red\");\r\n        break;\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ListItem onClick={() => callback(id)} button={true}>\r\n        <ListItemText>\r\n          <h3 className=\"date\">{date}</h3>\r\n          <p className=\"heading\">{title}</p>\r\n          <div className=\"pub\">\r\n            <FiberManualRecordIcon style={{ color: color }} />\r\n            <h3 style={{ margin: 0 }}>{publication}</h3>\r\n          </div>\r\n        </ListItemText>\r\n      </ListItem>\r\n      <Divider />\r\n    </>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { DateRange } from \"@material-ui/lab/DateRangePicker\";\r\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\r\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\r\nimport { useEffect } from \"react\";\r\nimport { DatePicker } from \"antd\";\r\nimport moment from \"moment\";\r\nimport \"./datepicker.styles.css\";\r\nimport \"antd/dist/antd.css\";\r\nconst { RangePicker } = DatePicker;\r\ninterface props {\r\n  filternews?: any;\r\n}\r\n\r\nexport const BasicDateRangePicker: React.FC<props> = ({ filternews }) => {\r\n  const [value, setValue] = React.useState<DateRange<Date>>([null, null]);\r\n  useEffect(() => {\r\n    filternews(value);\r\n    // eslint-disable-next-line\r\n  }, [value]);\r\n  function onChange(dates: any) {\r\n    if (dates === null) {\r\n      setValue([null, null]);\r\n      return;\r\n    }\r\n    setValue([moment(dates[0]).toDate(), moment(dates[1]).toDate()]);\r\n  }\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <RangePicker\r\n        style={{ width: \"100%\" }}\r\n        ranges={{\r\n          Today: [moment(), moment()],\r\n          \"This Month\": [moment().startOf(\"month\"), moment().endOf(\"month\")],\r\n          \"Last 60 Days\": [moment().subtract(60, \"days\"), moment()],\r\n        }}\r\n        onChange={onChange}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n","import \"./sidebar.styles.css\";\r\nimport { NewsListItem } from \"./newslistItem/newslistitem.component\";\r\nimport { Datum } from \"../../api/fetchNews\";\r\nimport { List } from \"@material-ui/core\";\r\nimport { BasicDateRangePicker } from \"./datepicker/datepicker.component\";\r\ninterface Props {\r\n  news: Datum[];\r\n  selectedArticle?: any;\r\n  filternews?: any;\r\n}\r\nexport const SideBar: React.FC<Props> = ({\r\n  news,\r\n  selectedArticle,\r\n  filternews,\r\n}) => {\r\n  const callback = (id: string) => {\r\n    selectedArticle(id);\r\n  };\r\n  const filterthenews = (data: Date[]) => {\r\n    filternews(data);\r\n  };\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"datepicker\">\r\n        <BasicDateRangePicker filternews={filterthenews} />\r\n      </div>\r\n      <List style={{ maxHeight: 725, overflow: \"auto\" }}>\r\n        {news.map((item) => (\r\n          <NewsListItem key={item.id} callback={callback} {...item} />\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","import { Datum } from \"../../api/fetchNews\";\r\nimport \"./main.component.css\";\r\ninterface props {\r\n  news: Datum | undefined;\r\n}\r\nexport const MainReader: React.FC<props> = ({ news }) => {\r\n  if (news) {\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"maincontainer\"\r\n          style={{ maxHeight: 730, overflow: \"auto\" }}\r\n        >\r\n          <div className=\"maintitle\">{news.title}</div>\r\n          <div className=\"publisherndate\">\r\n            <p className=\"publishername\">{news.publication}</p>\r\n            <p className=\"newsdate\">{news.date}</p>\r\n          </div>\r\n          <p className=\"newsdata\">{news.content}</p>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"emptyView\">\r\n        <h1>select a news article</h1>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DateAdapter from \"@material-ui/lab/AdapterDateFns\";\r\n\r\nimport { Header } from \"./components/header/header.component\";\r\nimport { SideBar } from \"./components/sidebar/sidebar.component\";\r\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\r\nimport { Datum, fetchNews } from \"./api/fetchNews\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { MainReader } from \"./components/main/main.component\";\r\nimport moment from \"moment\";\r\nimport \"./App.css\";\r\nimport { Source } from \"./api/fetchSources\";\r\nimport { Categories } from \"./api/fetchCategories\";\r\nexport const App = () => {\r\n  const [news, setnews] = useState<Datum[]>([]);\r\n  const [filtered, setfiltered] = useState<Datum[]>([]);\r\n  const [newsToDisplay, setNewsToDisplay] = useState<Datum>();\r\n  const [searchValue, setSearchValue] = useState(\"iphone\");\r\n  useEffect(() => {\r\n    fetchNews().then((res) => {\r\n      setnews(res);\r\n      setfiltered(res);\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  const renderArticle = (id: string) => {\r\n    setNewsToDisplay(filtered.find((e) => e.id === id));\r\n  };\r\n  const filternews = (date: Date[]) => {\r\n    if (date === null || date[0] === null) {\r\n      setfiltered([...news]);\r\n      return;\r\n    }\r\n\r\n    const filteredNews = news.filter((news) => {\r\n      let format = \"LL\";\r\n      let newstime = moment(news.date, format);\r\n      let start = moment(date[0], format);\r\n      let end = moment(date[1], format);\r\n      if (newstime.isBetween(start, end, undefined, \"[]\")) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    console.log(filteredNews);\r\n    setfiltered(filteredNews);\r\n  };\r\n  const searchNews = (value: string) => {\r\n    if (typeof value !== \"undefined\") {\r\n      setSearchValue(value);\r\n      fetchNews({ query: value }).then((res) => setfiltered(res));\r\n    }\r\n  };\r\n  const advancedSearch = (query: any) => {\r\n    console.log(query);\r\n\r\n    let categoryQ, sourceQ, sentimentQ;\r\n    if (\r\n      typeof query.categoryQuery.categories !== \"undefined\" &&\r\n      query.categoryQuery.categories.length > 0\r\n    ) {\r\n      categoryQ = query.categoryQuery.categories\r\n        .map((e: Categories) => e.iptc_code)\r\n        .join(\"%2C\");\r\n    }\r\n    if (\r\n      typeof query.sourceQuery.sources !== \"undefined\" &&\r\n      query.sourceQuery.sources.length > 0\r\n    ) {\r\n      sourceQ = query.sourceQuery.sources.map((e: Source) => e.id).join(\"%2C\");\r\n    }\r\n    if (typeof query.sentimentQuery.sentiments.sentiment !== \"undefined\") {\r\n      sentimentQ = query.sentimentQuery.sentiments.sentiment;\r\n    }\r\n\r\n    console.log(categoryQ, sourceQ, sentimentQ);\r\n    console.log(\r\n      fetchNews({\r\n        query: searchValue,\r\n        sentiment: sentimentQ,\r\n        category_id: categoryQ,\r\n        source_id: sourceQ,\r\n      }).then((res) => setfiltered(res))\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <LocalizationProvider dateAdapter={DateAdapter}>\r\n        <div className=\"appcontainer\">\r\n          <nav>\r\n            <Header\r\n              searchValue={searchNews}\r\n              advancedSearchQuery={advancedSearch}\r\n            />\r\n          </nav>\r\n          <main>\r\n            <MainReader news={newsToDisplay} />\r\n          </main>\r\n          <div id=\"sidebar\">\r\n            <SideBar\r\n              news={filtered}\r\n              selectedArticle={renderArticle}\r\n              filternews={filternews}\r\n            />\r\n          </div>\r\n        </div>\r\n      </LocalizationProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}